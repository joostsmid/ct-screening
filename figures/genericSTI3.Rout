
R version 3.4.4 (2018-03-15) -- "Someone to Lean On"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # Args from array in bash
> args=(commandArgs(TRUE))
> args=as.numeric(unlist(args))
> 
> # different start values of the parameters
> model.run=1:5
> 
> # different model types
> model.type=list(c("bet_","eps_","kap_","eta1_","eta2_","fsyM_","fsyF_","gam_","omA_","omS_","tre_"),
+                 c("bet_","eps_","eta1_","eta2_","fsyM_","fsyF_","gam_","omA_","omS_","tre_"),
+                 c("bet_","eps_","kap_","eta1_","fsyM_","fsyF_","gam_","omA_","omS_","tre_"),
+                 c("bet_","eps_","eta1_","fsyM_","fsyF_","gam_","omA_","omS_","tre_"))
> 
> # data file (maximum/minimum/midpoint data, as in Chandra et al, Eurosurveillance 2016)
> testdatafile <- c("testdata_mean.txt","testdata_min.txt","testdata_max.txt")[args[1]]
> diagdatafile <- c("diagnosisdata_mean.txt","diagnosisdata_min.txt","diagnosisdata_max.txt")[args[1]]
> 
> testmodel <- model.type[[args[2]]]
> 
> fullmodel<- c("bet_","eps_","gam_","kap_","omA_","omS_","fsyM_","fsyF_","tre_","eta1_","eta2_","r_")
> 
> sex = c("M","F")
> age.classes <- c(15,18,20,25,35,45)
> nJ <- 2
> 
> path_in <- "modelfiles"
> path_data <- "data"
> path_results <- "results"
> path_figures <- "figures"
> 
> n.mcmc.iterations <- 20000
> nsimsplot <- 500
> 
> source(file.path(path_in, "define_mcmc.R"))
Loading required package: tensorA

Attaching package: ‘tensorA’

The following object is masked from ‘package:base’:

    norm

Loading required package: abind
Loading required package: deSolve
Loading required package: compiler
Loading required package: sn
Loading required package: stats4

Attaching package: ‘sn’

The following object is masked from ‘package:stats’:

    sd

Loading required package: spatial
Loading required package: fields
Loading required package: spam
Loading required package: dotCall64
Loading required package: grid
Spam version 2.1-2 (2017-12-21) is loaded.
Type 'help( Spam)' or 'demo( spam)' for a short introduction 
and overview of this package.
Help for individual functions is also obtained by adding the
suffix '.spam' to the function name, e.g. 'help( chol.spam)'.

Attaching package: ‘spam’

The following object is masked from ‘package:stats4’:

    mle

The following objects are masked from ‘package:base’:

    backsolve, forwardsolve

Loading required package: maps
See www.image.ucar.edu/~nychka/Fields for
 a vignette and other supplements. 
Loading required package: MASS
Loading required package: fitdistrplus
Loading required package: survival
Loading required package: devtools
Loading required package: Hmisc
Loading required package: lattice
Loading required package: Formula
Loading required package: ggplot2

Attaching package: ‘Hmisc’

The following object is masked from ‘package:fields’:

    describe

The following objects are masked from ‘package:base’:

    format.pval, units

Loading required package: binom
Loading required package: XLConnect
Loading required package: XLConnectJars
Rjava.init.warning: lost 107372 bytes of stack after JVM initialization.
XLConnect 0.2-15 by Mirai Solutions GmbH [aut],
  Martin Studer [cre],
  The Apache Software Foundation [ctb, cph] (Apache POI),
  Graph Builder [ctb, cph] (Curvesapi Java library)
http://www.mirai-solutions.com
https://github.com/miraisolutions/xlconnect
Loading required package: foreign
Loading required package: reshape2
Loading required package: scales
Loading required package: RColorBrewer
Loading required package: sp
Loading required package: weights
Loading required package: gdata
gdata: read.xls support for 'XLS' (Excel 97-2004) files ENABLED.

gdata: Unable to load perl libaries needed by read.xls()
gdata: to support 'XLSX' (Excel 2007+) files.

gdata: Run the function 'installXLSXsupport()'
gdata: to automatically download and install the perl
gdata: libaries needed to support Excel XLS and XLSX formats.

Attaching package: ‘gdata’

The following object is masked from ‘package:stats4’:

    nobs

The following object is masked from ‘package:stats’:

    nobs

The following object is masked from ‘package:utils’:

    object.size

The following object is masked from ‘package:base’:

    startsWith

Loading required package: mice
Loading required package: fda
Loading required package: splines
Loading required package: Matrix

Attaching package: ‘fda’

The following object is masked from ‘package:graphics’:

    matplot

Loading required package: bbmle
Loading required package: dplyr

Attaching package: ‘dplyr’

The following object is masked from ‘package:bbmle’:

    slice

The following objects are masked from ‘package:gdata’:

    combine, first, last

The following objects are masked from ‘package:Hmisc’:

    src, summarize

The following object is masked from ‘package:MASS’:

    select

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: plyr
------------------------------------------------------------------------------
You have loaded plyr after dplyr - this is likely to cause problems.
If you need functions from both plyr and dplyr, please load plyr first, then dplyr:
library(plyr); library(dplyr)
------------------------------------------------------------------------------

Attaching package: ‘plyr’

The following objects are masked from ‘package:dplyr’:

    arrange, count, desc, failwith, id, mutate, rename, summarise,
    summarize

The following objects are masked from ‘package:Hmisc’:

    is.discrete, summarize

The following object is masked from ‘package:maps’:

    ozone

Loading required package: coda
Loading required package: tmvtnorm
Loading required package: mvtnorm
Loading required package: gmm
Loading required package: sandwich
Loading required package: fitR
Loading required package: adaptivetau
g++  -I/software.el7/software/R/3.4.4-foss-2018a-X11-20180131/lib64/R/include -DNDEBUG   -I/software.el7/software/OpenBLAS/0.2.20-GCC-6.4.0-2.28/include -I/software.el7/software/ScaLAPACK/2.0.2-gompi-2018a-OpenBLAS-0.2.20/include -I/software.el7/software/X11/20180131-GCCcore-6.4.0/include -I/software.el7/software/Mesa/17.3.6-foss-2018a/include -I/software.el7/software/libGLU/9.0.0-foss-2018a/include -I/software.el7/software/cairo/1.14.12-GCCcore-6.4.0/include -I/software.el7/software/libreadline/7.0-GCCcore-6.4.0/include -I/software.el7/software/ncurses/6.0-GCCcore-6.4.0/include -I/software.el7/software/bzip2/1.0.6-GCCcore-6.4.0/include -I/software.el7/software/XZ/5.2.3-GCCcore-6.4.0/include -I/software.el7/software/zlib/1.2.11-GCCcore-6.4.0/include -I/software.el7/software/SQLite/3.21.0-GCCcore-6.4.0/include -I/software.el7/software/PCRE/8.41-GCCcore-6.4.0/include -I/software.el7/software/libpng/1.6.34-GCCcore-6.4.0/include -I/software.el7/software/libjpeg-turbo/1.5.3-GCCcore-6.4.0/include -I/software.el7/software/LibTIFF/4.0.9-GCCcore-6.4.0/include -I/software.el7/software/Java/1.8.0_162/include -I/software.el7/software/Tcl/8.6.8-GCCcore-6.4.0/include -I/software.el7/software/Tk/8.6.8-foss-2018a/include -I/software.el7/software/cURL/7.58.0-GCCcore-6.4.0/include -I/software.el7/software/libxml2/2.9.7-GCCcore-6.4.0/include -I/software.el7/software/GDAL/2.2.3-foss-2018a-Python-3.6.4/include -I/software.el7/software/PROJ/5.0.0-foss-2018a/include -I/software.el7/software/GMP/6.1.2-GCCcore-6.4.0/include -I/software.el7/software/NLopt/2.4.2-foss-2018a/include -I/software.el7/software/FFTW/3.3.7-gompi-2018a/include -I/software.el7/software/libsndfile/1.0.28-GCCcore-6.4.0/include -I/software.el7/software/ICU/61.1-GCCcore-6.4.0/include   -fpic  -O2 -ftree-vectorize -march=native -fno-math-errno  -c STIreduced.cpp -o STIreduced.o
g++ -shared -L/software.el7/software/R/3.4.4-foss-2018a-X11-20180131/lib64/R/lib -L/software.el7/software/GCCcore/6.4.0/lib64 -L/software.el7/software/GCCcore/6.4.0/lib -L/software.el7/software/OpenBLAS/0.2.20-GCC-6.4.0-2.28/lib -L/software.el7/software/ScaLAPACK/2.0.2-gompi-2018a-OpenBLAS-0.2.20/lib -L/software.el7/software/X11/20180131-GCCcore-6.4.0/lib -L/software.el7/software/Mesa/17.3.6-foss-2018a/lib -L/software.el7/software/libGLU/9.0.0-foss-2018a/lib -L/software.el7/software/cairo/1.14.12-GCCcore-6.4.0/lib -L/software.el7/software/libreadline/7.0-GCCcore-6.4.0/lib -L/software.el7/software/ncurses/6.0-GCCcore-6.4.0/lib -L/software.el7/software/bzip2/1.0.6-GCCcore-6.4.0/lib -L/software.el7/software/XZ/5.2.3-GCCcore-6.4.0/lib -L/software.el7/software/zlib/1.2.11-GCCcore-6.4.0/lib -L/software.el7/software/SQLite/3.21.0-GCCcore-6.4.0/lib -L/software.el7/software/PCRE/8.41-GCCcore-6.4.0/lib -L/software.el7/software/libpng/1.6.34-GCCcore-6.4.0/lib -L/software.el7/software/libjpeg-turbo/1.5.3-GCCcore-6.4.0/lib -L/software.el7/software/LibTIFF/4.0.9-GCCcore-6.4.0/lib -L/software.el7/software/Java/1.8.0_162/lib -L/software.el7/software/Tcl/8.6.8-GCCcore-6.4.0/lib -L/software.el7/software/Tk/8.6.8-foss-2018a/lib -L/software.el7/software/cURL/7.58.0-GCCcore-6.4.0/lib -L/software.el7/software/libxml2/2.9.7-GCCcore-6.4.0/lib -L/software.el7/software/GDAL/2.2.3-foss-2018a-Python-3.6.4/lib -L/software.el7/software/PROJ/5.0.0-foss-2018a/lib -L/software.el7/software/GMP/6.1.2-GCCcore-6.4.0/lib -L/software.el7/software/NLopt/2.4.2-foss-2018a/lib -L/software.el7/software/FFTW/3.3.7-gompi-2018a/lib -L/software.el7/software/libsndfile/1.0.28-GCCcore-6.4.0/lib -L/software.el7/software/ICU/61.1-GCCcore-6.4.0/lib -o STIreduced.so STIreduced.o -L/software.el7/software/R/3.4.4-foss-2018a-X11-20180131/lib64/R/lib -lR
> source(file.path(path_in, "plot_functions.R"))
> 
> mycol <- brewer.pal(9,"Set1")
> mycol <- c(mycol[9],mycol[1:8])
> 
> ##############################################################################
> # mcmc traces
> ##############################################################################
> 
> col1M <- "blue"
> col2M <- "green4"
> col1F <- "red"
> col2F <- "orange"
> 
> mcmclst <- list()
> 
> for (nrun in model.run){
+   
+   load(file.path(path_results,paste0("trace", (args[1]-1)*length(model.run)*4+(args[2]-1)*length(model.run)+nrun, ".RData")))
+   
+   tracetrace <- as.matrix(trace$trace)
+   allvarnames <- colnames(tracetrace)
+   tracetrace <- as.data.frame(matrix(unlist(tracetrace), ncol = dim(tracetrace)[2], byrow = FALSE))
+   names(tracetrace) <- allvarnames
+   
+   assign(paste0("tracetrace.params",nrun), tracetrace[,c((1:length(fullmodel))[fullmodel %in% testmodel],dim(tracetrace)[2])])
+   assign(paste0("trace",nrun), mcmc(eval(parse(text = paste0("tracetrace.params",nrun)))))
+   mcmclst[[nrun]] <- eval(parse(text = paste0("trace",nrun)))
+   
+ }
> 
> # combine traces as mcmc.list object
> trace.mcmc.params <- mcmc.list(mcmclst)
> nall.mcmc.iterations <- dim(trace.mcmc.params[[1]])[1]
> 
> #acceptance rate, effective sampling size
> accrate <- 1 - rejectionRate(trace.mcmc.params)
> effectiveSize <- effectiveSize(trace.mcmc.params)
> 
> # remove burnin
> trace.mcmc.params.burned <- burnAndThin(trace.mcmc.params, burn = round(nall.mcmc.iterations*0.4))
> 
> #do thinning
> trace.mcmc.params.burned.thinned.xy <- burnAndThin(trace.mcmc.params, 
+                                                    burn = round(nall.mcmc.iterations*0.4), 
+                                                    thin = 20)
> 
> trace.mcmc.params.burned.thinned <- burnAndThin(trace.mcmc.params, 
+                                                 burn = round(nall.mcmc.iterations*0.4), 
+                                                 thin = round(length(model.run)*nall.mcmc.iterations*0.6/nsimsplot))
> 
> summary.trace.mcmc.params.burned <- summary(trace.mcmc.params.burned) 
> 
> pdf(file.path(path_figures,"xyplot.pdf"),width=5,height=7)
> xyplot(trace.mcmc.params.burned.thinned.xy)
> dev.off()
null device 
          1 
> 
> pdf(file.path(path_figures,"densityplot.pdf"),width=5,height=7)
> densityplot(trace.mcmc.params.burned.thinned.xy)
> dev.off()
null device 
          1 
> 
> ##############################################################################
> # compute Gelman-Rubin diagnostic
> ##############################################################################
> 
> sj2 <- 1/(dim(trace.mcmc.params.burned[[1]])[1]-1) 
> 
> n.chains <- length(model.run)
> n.params <- dim(trace.mcmc.params.burned[[1]])[2]
> n.it <- dim(trace.mcmc.params.burned[[1]])[1]
> 
> Rhat <- rep(NA, n.params-1)
> for (k in 1:(n.params-1)){ # loop over number of parameters
+   
+   sj2 <- rep(NA, n.chains)
+   thetabarj <- rep(NA, n.chains)
+   for (j in 1:n.chains){ # loop over number of chains
+     thetabarj[j] <- mean(trace.mcmc.params.burned[[j]][,k])
+     sj2[j] <- 1/(n.it-1) * sum((trace.mcmc.params.burned[[j]][,k]-thetabarj[j] )^2)
+   }
+   
+   thetabarbar <- 1/n.chains * sum(thetabarj)
+   W <- 1/n.chains * sum(sj2)
+   B <- n.it / (n.chains-1) * sum((thetabarj[j] - thetabarbar)^2)
+   
+   varthetahat <- (1-1/n.it) * W + 1/n.it * B
+   Rhat[k] <- sqrt(varthetahat / W)
+   
+ }
> 
> ##############################################################################
> # COMPUTE DIC
> ##############################################################################
> 
> trace.combined <- ldply(trace.mcmc.params.burned.thinned)
> 
> # matrix for log pointwise predictive density
> lppd.M <- matrix(NA, nrow=dim(trace.combined)[1], ncol=prod(dim(epidata[[1]])[1:2]) + prod(dim(epidata[[2]])[1:2]) + prod(dim(epidata[[3]])))
> for (k in 1:dim(trace.combined)[1]){
+   notlearned <- tracetrace[1,which(!(fullmodel %in% testmodel))]
+   if(length(notlearned)==1) names(notlearned) <- "r"
+   theta.k.allpars <- unlist(c(trace.combined[k,1:(dim(trace.combined)[2]-1)], notlearned))
+   lppd.M[k,] <- my_dTrajObs(STI_MCMC_model, theta.k.allpars , epidata)
+ }
> 
> theta.bar <- colMeans(trace.combined[-dim(trace.combined)[2]])
> notlearned <- tracetrace[1,which(!(fullmodel %in% testmodel))]
> if(length(notlearned)==1) names(notlearned) <- "r"
> theta.bar.allpars <- unlist(c(theta.bar, notlearned))
> log.like.theta.bar <- sum(log(my_dTrajObs(STI_MCMC_model, theta.bar.allpars , epidata)))
> D.theta.bar <- -2 * log.like.theta.bar
> #p.D <- var(-2 * trace.combined$log.density)/2
> p.D <- var(-2 * rowSums(log(lppd.M)))/2
> DIC <- D.theta.bar + 2 * p.D
> # Spiegelhalter 2002: 9.2.4. What is an important difference in DIC?
> # Burnham and Anderson (1998) suggested models receiving AIC within 1-2 of the 'best' deserve
> # consideration, and 3-7 have considerably less support: these rules of thumb appear to work
> # reasonably well for DIC.
> 
> ##############################################################################
> # COMPUTE WAIC
> ##############################################################################
> 
> # https://link.springer.com/content/pdf/10.1007%2Fs11222-013-9416-2.pdf
> pW <- 2* sum( log(colMeans(lppd.M))-colMeans(log(lppd.M)))
> pW.alt <- sum(apply(log(lppd.M), MARGIN=2, var))
> 
> lppd <- sum( log(colMeans(lppd.M)))
> 
> WAIC <- -2 * (lppd - pW)
> 
> ##############################################################################
> # COMPARE MCMC RESULT TO PREVALENCE DATA
> ##############################################################################
> 
> myyears <- as.numeric(rownames(testdata))
> 
> # function to create posterior estimates for mean prevalence and numbers of diagnoses pp (plus CI)
> simulate_prevs_diag <- function(trace.mcmc.pars, fitmodel, years=myyears, CI=.95){
+   # function to plot CT prevalences in certain year
+   
+   plottedsims <- dim(trace.mcmc.pars)[1]
+   times <- c(0, (parameters$burnintime - parameters$testperiod_in_burnin):(parameters$burnintime+dim(diagdata)[1]))
+ 
+   prevalenceT <- to.tensor(NA, dims = list(sex=c("M","F"), age=paste0('age', age.class.groups), screening_y = years, nsim = 1:plottedsims))
+   diagT <- to.tensor(NA, dims = list(sex=c("M","F"), age=paste0('age', age.class.groups), screening_y = years, nsim = 1:plottedsims))
+   incidenceT <- to.tensor(NA, dims = list(sex=c("M","F"), age=paste0('age', age.class.groups), screening_y = years, nsim = 1:plottedsims)) # screening rate in all people
+   
+   
+   for (s in 1:plottedsims){
+     theta <- trace.mcmc.pars[s, 1:length(testmodel)]
+     notlearned <- tracetrace[1,which(!(fullmodel %in% testmodel))]
+     if(length(notlearned)==1) names(notlearned) <- "r"
+     theta.allpars <- unlist(c(theta, notlearned))
+     
+     simulation <- fitmodel$simulate(theta.allpars, times)
+     
+     for (y in 1:length(years)){
+       
+       # model output
+       #traj.last <- traj[traj$time==max.simtime, -1]
+       simulation.y <- simulation[which(times+2000-parameters$burnintime==years[y]), -1]
+       
+       tensors <- initvec.to.tensor.cpp(simulation.y, par.cond = list(age_classes =age.class.groups, nmb_act_classes = nJ))
+       
+       U.mod <- tensors$U
+       S.mod <- tensors$S
+       I_A.mod <- tensors$I_A
+       I_S.mod <- tensors$I_S
+       R.mod <- tensors$R
+       I_A.mod2 <- tensors$I_A2
+       I_S.mod2 <- tensors$I_S2
+       D.mod <- tensors$D
+       Inc.mod <- tensors$Inc
+       
+       #marginalize across activity classes
+       S.mod <- margin.tensor(S.mod,i=2)
+       I_A.mod <- margin.tensor(I_A.mod,i=2)
+       I_S.mod <- margin.tensor(I_S.mod,i=2)
+       R.mod <- margin.tensor(R.mod,i=2)
+       I_A.mod2 <- margin.tensor(I_A.mod2,i=2)
+       I_S.mod2 <- margin.tensor(I_S.mod2,i=2)
+       D.mod <- margin.tensor(D.mod,i=2)
+       Inc.mod <- margin.tensor(Inc.mod,i=2)
+       
+       prevalence <- (I_A.mod + I_S.mod + I_A.mod2 + I_S.mod2) / (S.mod + I_A.mod + I_S.mod + R.mod + I_A.mod2 + I_S.mod2) # model prevalence
+       
+       prevalenceT[,,y,s] <- prevalence
+       diagT[,,y,s] <- D.mod
+       incidenceT[,,y,s] <- Inc.mod
+       
+     }
+     
+   }
+   
+   sorted_prevalenceT <- prevalenceT
+   sorted_diagT <- diagT
+   sorted_incidenceT <- incidenceT
+   for (g in 1:dim(sorted_prevalenceT)[1]){
+     for (a in 1:dim(sorted_prevalenceT)[2]){
+       for (y in 1:dim(sorted_prevalenceT)[3]){
+         sorted_prevalenceT[g,a,y,] <- sort(prevalenceT[g,a,y,])
+         sorted_diagT[g,a,y,] <- sort(diagT[g,a,y,])
+         sorted_incidenceT[g,a,y,] <- sort(incidenceT[g,a,y,])
+       }
+     }
+   }
+   
+   mean_prevalenceT <- apply(prevalenceT, MARGIN=c(1,2,3), FUN=mean)
+   low_prevalenceT <- sorted_prevalenceT[,,,ceiling(((1-CI)/2)*dim(trace.mcmc.pars)[1])]
+   upp_prevalenceT <- sorted_prevalenceT[,,,floor((1-(1-CI)/2)*dim(trace.mcmc.pars)[1])]
+   
+   mean_diagT <- apply(diagT, MARGIN=c(1,2,3), FUN=mean)
+   low_diagT <- sorted_diagT[,,,ceiling(((1-CI)/2)*dim(trace.mcmc.pars)[1])]
+   upp_diagT <- sorted_diagT[,,,floor((1-(1-CI)/2)*dim(trace.mcmc.pars)[1])]
+   
+   mean_incidenceT <- apply(incidenceT, MARGIN=c(1,2,3), FUN=mean)
+   low_incidenceT <- sorted_incidenceT[,,,ceiling(((1-CI)/2)*dim(trace.mcmc.pars)[1])]
+   upp_incidenceT <- sorted_incidenceT[,,,floor((1-(1-CI)/2)*dim(trace.mcmc.pars)[1])]
+   
+   return(list(prevalenceT=prevalenceT, mean_prevalenceT=mean_prevalenceT, low_prevalenceT=low_prevalenceT, upp_prevalenceT=upp_prevalenceT,
+               diagT=diagT, mean_diagT=mean_diagT, low_diagT=low_diagT, upp_diagT=upp_diagT,
+               incidenceT=incidenceT, mean_incidenceT=mean_incidenceT, low_incidenceT=low_incidenceT, upp_incidenceT=upp_incidenceT))
+   
+ }
> 
> postsims <- simulate_prevs_diag(trace.mcmc.pars=trace.combined, fitmodel=STI_MCMC_model, years=myyears)
> 
> ### (comparison 2000-2011)
> plotdataM.2000 <- data.frame(ages=age.class.groups,
+                              agesto=age.classes[2:(n.age.classes+1)],
+                              prev.mean=summary(mcmc(data.matrix(t(postsims$prevalenceT[1,,1,]))))$statistics[,"Mean"],
+                              prev.low=summary(mcmc(data.matrix(t(postsims$prevalenceT[1,,1,]))))$quantiles[,"2.5%"],
+                              prev.high=summary(mcmc(data.matrix(t(postsims$prevalenceT[1,,1,]))))$quantiles[,"97.5%"],
+                              prevdata.mean=binom.confint(as.numeric(epidata$time_0[1,,1]),as.numeric(epidata$time_0[1,,2]), conf.level=.95,method="wilson")$mean,
+                              prevdata.low=binom.confint(as.numeric(epidata$time_0[1,,1]),as.numeric(epidata$time_0[1,,2]), conf.level=.95,method="wilson")$lower,
+                              prevdata.upp=binom.confint(as.numeric(epidata$time_0[1,,1]),as.numeric(epidata$time_0[1,,2]), conf.level=.95,method="wilson")$upper)
> 
> plotdataF.2000 <- data.frame(ages=age.class.groups,
+                              agesto=age.classes[2:(n.age.classes+1)],
+                              prev.mean=summary(mcmc(data.matrix(t(postsims$prevalenceT[2,,1,]))))$statistics[,"Mean"],
+                              prev.low=summary(mcmc(data.matrix(t(postsims$prevalenceT[2,,1,]))))$quantiles[,"2.5%"],
+                              prev.high=summary(mcmc(data.matrix(t(postsims$prevalenceT[2,,1,]))))$quantiles[,"97.5%"],
+                              prevdata.mean=binom.confint(as.numeric(epidata$time_0[2,,1]),as.numeric(epidata$time_0[2,,2]), conf.level=.95,method="wilson")$mean,
+                              prevdata.low=binom.confint(as.numeric(epidata$time_0[2,,1]),as.numeric(epidata$time_0[2,,2]), conf.level=.95,method="wilson")$lower,
+                              prevdata.upp=binom.confint(as.numeric(epidata$time_0[2,,1]),as.numeric(epidata$time_0[2,,2]), conf.level=.95,method="wilson")$upper)
> 
> plotdataM.2011 <- data.frame(ages=age.class.groups,
+                              agesto=age.classes[2:(n.age.classes+1)],
+                              prev.mean=summary(mcmc(data.matrix(t(postsims$prevalenceT[1,,12,]))))$statistics[,"Mean"],
+                              prev.low=summary(mcmc(data.matrix(t(postsims$prevalenceT[1,,12,]))))$quantiles[,"2.5%"],
+                              prev.high=summary(mcmc(data.matrix(t(postsims$prevalenceT[1,,12,]))))$quantiles[,"97.5%"],
+                              prevdata.mean=binom.confint(as.numeric(epidata$time_11[1,,1]),as.numeric(epidata$time_11[1,,2]), conf.level=.95,method="wilson")$mean,
+                              prevdata.low=binom.confint(as.numeric(epidata$time_11[1,,1]),as.numeric(epidata$time_11[1,,2]), conf.level=.95,method="wilson")$lower,
+                              prevdata.upp=binom.confint(as.numeric(epidata$time_11[1,,1]),as.numeric(epidata$time_11[1,,2]), conf.level=.95,method="wilson")$upper)
> 
> plotdataF.2011 <- data.frame(ages=age.class.groups,
+                              agesto=age.classes[2:(n.age.classes+1)],
+                              prev.mean=summary(mcmc(data.matrix(t(postsims$prevalenceT[2,,12,]))))$statistics[,"Mean"],
+                              prev.low=summary(mcmc(data.matrix(t(postsims$prevalenceT[2,,12,]))))$quantiles[,"2.5%"],
+                              prev.high=summary(mcmc(data.matrix(t(postsims$prevalenceT[2,,12,]))))$quantiles[,"97.5%"],
+                              prevdata.mean=binom.confint(as.numeric(epidata$time_11[2,,1]),as.numeric(epidata$time_11[2,,2]), conf.level=.95,method="wilson")$mean,
+                              prevdata.low=binom.confint(as.numeric(epidata$time_11[2,,1]),as.numeric(epidata$time_11[2,,2]), conf.level=.95,method="wilson")$lower,
+                              prevdata.upp=binom.confint(as.numeric(epidata$time_11[2,,1]),as.numeric(epidata$time_11[2,,2]), conf.level=.95,method="wilson")$upper)
> 
> plotprevs.M.2000 <- ggplot() +
+   geom_segment(data = plotdataM.2000, aes(x = ages, xend = agesto, y = prev.mean, yend = prev.mean), size = 1, lineend = "butt") +
+   geom_rect(data = plotdataM.2000, aes(xmin=ages, xmax=agesto, ymin=prev.low, ymax=prev.high),alpha=.3) + 
+   geom_point(data=plotdataM.2000, mapping=aes(x=(ages+agesto)/2, y=prevdata.mean), size=3, shape=19, alpha = 1) +
+   geom_errorbar(data=plotdataM.2000, mapping=aes(x=(ages+agesto)/2, ymin=prevdata.low, ymax=prevdata.upp), width=0.2, size=.1, alpha = 1) + 
+   scale_y_continuous(breaks = seq(0,0.07, by=0.01)) +
+   labs(x = "Ages") +
+   labs(y = "Prevalence per person") +
+   annotate("text", x=40, y=0.069, label= "Men 2000", size=4) +
+   theme_bw(base_family = "Times") +
+   coord_cartesian(ylim=c(0,0.07)) +
+   scale_x_continuous(breaks=(age.class.groups+age.classes[-1])/2, labels=paste0(age.class.groups,"-",(age.classes[-1]-1))) +
+   theme(plot.background = element_blank(),panel.grid.major = element_blank(),panel.grid.minor = element_blank(),
+         axis.text.x = element_text(angle = 45, hjust = 1), text=element_text(size=10, family="Arial"))
> 
> plotprevs.F.2000 <- ggplot() +
+   geom_segment(data = plotdataF.2000, aes(x = ages, xend = agesto, y = prev.mean, yend = prev.mean), size = 1, lineend = "butt") +
+   geom_rect(data = plotdataF.2000, aes(xmin=ages, xmax=agesto, ymin=prev.low, ymax=prev.high), alpha=.3) + 
+   geom_point(data=plotdataF.2000, mapping=aes(x=(ages+agesto)/2, y=prevdata.mean), size=3, shape=19, alpha = 1) +
+   geom_errorbar(data=plotdataF.2000, mapping=aes(x=(ages+agesto)/2, ymin=prevdata.low, ymax=prevdata.upp), width=0.2, size=.1, alpha = 1) + 
+   scale_y_continuous(breaks = seq(0,0.07, by=0.01)) +
+   labs(x = "Ages") +
+   labs(y = "Prevalence per person") +
+   annotate("text", x=38, y=0.069, label= "Women 2000", size=4) +
+   theme_bw(base_family = "Times") +
+   coord_cartesian(ylim=c(0,0.07)) +
+   scale_x_continuous(breaks=(age.class.groups+age.classes[-1])/2, labels=paste0(age.class.groups,"-",(age.classes[-1]-1))) +
+   theme(plot.background = element_blank(),panel.grid.major = element_blank(),panel.grid.minor = element_blank(),
+         axis.text.x = element_text(angle = 45, hjust = 1), text=element_text(size=10, family="Arial"))
> 
> plotprevs.M.2011 <- ggplot() +
+   geom_segment(data = plotdataM.2011, aes(x = ages, xend = agesto, y = prev.mean, yend = prev.mean), size = 1, lineend = "butt") +
+   geom_rect(data = plotdataM.2011, aes(xmin=ages, xmax=agesto, ymin=prev.low, ymax=prev.high),alpha=.3) + 
+   geom_point(data=plotdataM.2011, mapping=aes(x=(ages+agesto)/2, y=prevdata.mean), size=3, shape=19, alpha = 1) +
+   geom_errorbar(data=plotdataM.2011, mapping=aes(x=(ages+agesto)/2, ymin=prevdata.low, ymax=prevdata.upp), width=0.2, size=.1, alpha = 1) + 
+   scale_y_continuous(breaks = seq(0,0.07, by=0.01)) +
+   labs(x = "Ages") +
+   labs(y = "Prevalence per person") +
+   annotate("text", x=40, y=0.069, label= "Men 2011", size=4) +
+   theme_bw(base_family = "Times") +
+   coord_cartesian(ylim=c(0,0.07)) +
+   scale_x_continuous(breaks=(age.class.groups+age.classes[-1])/2, labels=paste0(age.class.groups,"-",(age.classes[-1]-1))) +
+   theme(plot.background = element_blank(),panel.grid.major = element_blank(),panel.grid.minor = element_blank(),
+         axis.text.x = element_text(angle = 45, hjust = 1), text=element_text(size=10, family="Arial"))
> 
> plotprevs.F.2011 <- ggplot() +
+   geom_segment(data = plotdataF.2011, aes(x = ages, xend = agesto, y = prev.mean, yend = prev.mean), size = 1, lineend = "butt") +
+   geom_rect(data = plotdataF.2011, aes(xmin=ages, xmax=agesto, ymin=prev.low, ymax=prev.high), alpha=.3) + 
+   geom_point(data=plotdataF.2011, mapping=aes(x=(ages+agesto)/2, y=prevdata.mean), size=3, shape=19, alpha = 1) +
+   geom_errorbar(data=plotdataF.2011, mapping=aes(x=(ages+agesto)/2, ymin=prevdata.low, ymax=prevdata.upp), width=0.2, size=.1, alpha = 1) + 
+   scale_y_continuous(breaks = seq(0,0.07, by=0.01)) +
+   labs(x = "Ages") +
+   labs(y = "Prevalence per person") +
+   annotate("text", x=38, y=0.069, label= "Women 2011", size=4) +
+   theme_bw(base_family = "Times") +
+   coord_cartesian(ylim=c(0,0.07)) +
+   scale_x_continuous(breaks=(age.class.groups+age.classes[-1])/2, labels=paste0(age.class.groups,"-",(age.classes[-1]-1))) +
+   theme(plot.background = element_blank(),panel.grid.major = element_blank(),panel.grid.minor = element_blank(),
+         axis.text.x = element_text(angle = 45, hjust = 1), text=element_text(size=10, family="Arial"))
> 
> ggsave(multiplot(plotlist=list(plotprevs.M.2000,plotprevs.F.2000,
+                                plotprevs.M.2011,plotprevs.F.2011), layout=matrix(c(1,2,3,4), nrow=2, byrow=TRUE)), 
+        filename = file.path(path_figures,"epiprevplot.pdf"), device = cairo_pdf, 
+        width = 7, height = 7, units = "in")
Warning messages:
1: Removed 1 rows containing missing values (geom_point). 
2: Removed 1 rows containing missing values (geom_errorbar). 
3: Removed 1 rows containing missing values (geom_point). 
4: Removed 1 rows containing missing values (geom_errorbar). 
> 
> # change of prevalence in time for different sex and age groups
> gendernames <- c("Men","Women")
> 
> for (g in 1:2){
+   df_prev <- data.frame(years=rep(myyears,4),
+                         mean=c(as.vector(3/5*postsims$mean_prevalenceT[g,1,] + 2/5*postsims$mean_prevalenceT[g,2,]),
+                                as.vector(postsims$mean_prevalenceT[g,3,]),
+                                as.vector(postsims$mean_prevalenceT[g,4,]),
+                                as.vector(postsims$mean_prevalenceT[g,5,])),
+                         
+                         low=c(as.vector(3/5*postsims$low_prevalenceT[g,1,] + 2/5*postsims$low_prevalenceT[g,2,]),
+                               as.vector(postsims$low_prevalenceT[g,3,]),
+                               as.vector(postsims$low_prevalenceT[g,4,]),
+                               as.vector(postsims$low_prevalenceT[g,5,])),
+                         
+                         upp=c(as.vector(3/5*postsims$upp_prevalenceT[g,1,] + 2/5*postsims$upp_prevalenceT[g,2,]),
+                               as.vector(postsims$upp_prevalenceT[g,3,]),
+                               as.vector(postsims$upp_prevalenceT[g,4,]),
+                               as.vector(postsims$upp_prevalenceT[g,5,])),
+                         grp=c(rep("15-19",length(myyears)),
+                               rep("20-24",length(myyears)),
+                               rep("25-34",length(myyears)),
+                               rep("35-44",length(myyears))))
+   
+   prevtimeplot <- ggplot() +
+     geom_line(data=df_prev, mapping=aes(x=years, y=mean, col=grp), size=1) +
+     geom_ribbon(data=df_prev, aes(x=years, ymin=low, ymax=upp, fill=grp), alpha = .3) +
+     scale_x_continuous(breaks = seq(min(df_prev$years), max(df_prev$years), by = 2)) +
+     scale_y_continuous(breaks = seq(0,0.06, by=0.01)) +
+     scale_color_manual("", values = mycol[1:4]) +
+     scale_fill_manual("", values = mycol[1:4]) +
+     coord_cartesian(ylim=c(0,0.06)) +
+     labs(x = "Years") +
+     labs(y = "Prevalence") +
+     ggtitle(gendernames[g]) +
+     theme_bw(base_family = "Times") +
+     theme(plot.background = element_blank(),panel.grid.major = element_blank(),panel.grid.minor = element_blank(),
+           legend.justification=c(0.99,.99), legend.position=c(0.99,.99),text=element_text(size=10, family="Arial"))
+   
+   assign(paste0("prevtimeplot_",gendernames[g]), prevtimeplot)
+ }
> 
> ggsave(multiplot(plotlist=list(prevtimeplot_Men,prevtimeplot_Women), layout=matrix(c(1,2), nrow=1, byrow=TRUE)), 
+        filename = file.path(path_figures,"prevtimeplot.pdf"), device = cairo_pdf, 
+        width = 7, height = 4, units = "in")
> 
> ####################################################################
> # epistats data (prevalence, incidence tests, diagnoses, positivity rate)
> ####################################################################
> 
> age.catdata <- c(15,20,25,35,45)
> years.in.categories <- to.tensor(NA, dims = list(age=paste0('age', age.classes[1:(n.age.classes)]) ,screencatage=paste0('diagcatage', age.catdata[1:(length(age.catdata)-1)])))
> for (k in 1:n.age.classes){
+   for (y in 1:(length(age.catdata)-1)){
+     years.in.categories[k,y] <- length(intersect( seq(age.classes[k],age.classes[k+1]-1), seq(age.catdata[y],age.catdata[y+1]-1) ))
+   }
+ }
> norm.years.in.categories <- years.in.categories / margin.tensor(years.in.categories, i=1) # fraction of time that individuals in age.classes[k] are in the screencatage[j] class
> 
> # test data
> meantestdata <- read.table(file.path(path_data,"testdata_mean.txt"), header=T, row.names=1)
> mintestdata <- read.table(file.path(path_data,"testdata_min.txt"), header=T, row.names=1)
> maxtestdata <- read.table(file.path(path_data,"testdata_max.txt"), header=T, row.names=1)
> 
> uptake.minmax <- to.tensor(NA, dims = list(sex=c("M","F"), age=paste0('age', c(15,20,25,35)),minmax=c("min","max","mean"),screening_y = as.numeric(rownames(meantestdata))))
> uptake.minmax["M",1,1,] <- mintestdata[,1]/100
> uptake.minmax["M",2,1,] <- mintestdata[,2]/100
> uptake.minmax["M",3,1,] <- mintestdata[,3]/100
> uptake.minmax["M",4,1,] <- mintestdata[,4]/100
> uptake.minmax["F",1,1,] <- mintestdata[,5]/100
> uptake.minmax["F",2,1,] <- mintestdata[,6]/100
> uptake.minmax["F",3,1,] <- mintestdata[,7]/100
> uptake.minmax["F",4,1,] <- mintestdata[,8]/100
> 
> uptake.minmax["M",1,2,] <- maxtestdata[,1]/100
> uptake.minmax["M",2,2,] <- maxtestdata[,2]/100
> uptake.minmax["M",3,2,] <- maxtestdata[,3]/100
> uptake.minmax["M",4,2,] <- maxtestdata[,4]/100
> uptake.minmax["F",1,2,] <- maxtestdata[,5]/100
> uptake.minmax["F",2,2,] <- maxtestdata[,6]/100
> uptake.minmax["F",3,2,] <- maxtestdata[,7]/100
> uptake.minmax["F",4,2,] <- maxtestdata[,8]/100
> 
> uptake.minmax["M",1,3,] <- meantestdata[,1]/100
> uptake.minmax["M",2,3,] <- meantestdata[,2]/100
> uptake.minmax["M",3,3,] <- meantestdata[,3]/100
> uptake.minmax["M",4,3,] <- meantestdata[,4]/100
> uptake.minmax["F",1,3,] <- meantestdata[,5]/100
> uptake.minmax["F",2,3,] <- meantestdata[,6]/100
> uptake.minmax["F",3,3,] <- meantestdata[,7]/100
> uptake.minmax["F",4,3,] <- meantestdata[,8]/100
> 
> # diagnoses
> meandiagdata <- read.table(file.path(path_data,"diagnosisdata_mean.txt"), header=T, row.names=1)
> mindiagdata <- read.table(file.path(path_data,"diagnosisdata_min.txt"), header=T, row.names=1)
> maxdiagdata <- read.table(file.path(path_data,"diagnosisdata_max.txt"), header=T, row.names=1)
> 
> # minimum and maximum estimates given, expected value defined as average of min and max
> epidata_diag <- to.tensor(NA, dims = list(sex=c("M","F"), age=paste0('age', c(15,20,25,35)),minmax=c("min","max","mean"),screening_y = as.numeric(rownames(meantestdata))))
> epidata_diag["M",1,1,] <- mindiagdata[,1]
> epidata_diag["M",2,1,] <- mindiagdata[,2]
> epidata_diag["M",3,1,] <- mindiagdata[,3]
> epidata_diag["M",4,1,] <- mindiagdata[,4]
> epidata_diag["F",1,1,] <- mindiagdata[,5]
> epidata_diag["F",2,1,] <- mindiagdata[,6]
> epidata_diag["F",3,1,] <- mindiagdata[,7]
> epidata_diag["F",4,1,] <- mindiagdata[,8]
> 
> epidata_diag["M",1,2,] <- maxdiagdata[,1]
> epidata_diag["M",2,2,] <- maxdiagdata[,2]
> epidata_diag["M",3,2,] <- maxdiagdata[,3]
> epidata_diag["M",4,2,] <- maxdiagdata[,4]
> epidata_diag["F",1,2,] <- maxdiagdata[,5]
> epidata_diag["F",2,2,] <- maxdiagdata[,6]
> epidata_diag["F",3,2,] <- maxdiagdata[,7]
> epidata_diag["F",4,2,] <- maxdiagdata[,8]
> 
> epidata_diag["M",1,3,] <- meandiagdata[,1]
> epidata_diag["M",2,3,] <- meandiagdata[,2]
> epidata_diag["M",3,3,] <- meandiagdata[,3]
> epidata_diag["M",4,3,] <- meandiagdata[,4]
> epidata_diag["F",1,3,] <- meandiagdata[,5]
> epidata_diag["F",2,3,] <- meandiagdata[,6]
> epidata_diag["F",3,3,] <- meandiagdata[,7]
> epidata_diag["F",4,3,] <- meandiagdata[,8]
> 
> mean_diagT <- to.tensor(as.vector(postsims$mean_diagT), dims= list(sex=c("M","F"), age=paste0('age', age.classes[1:(n.age.classes)]), screening_y=myyears ))
> size.age.classes <- to.tensor(diff(age.classes), dims=list(age=paste0('age', age.classes[1:n.age.classes]))) #JS040416
> mean_diagT <- mean_diagT / size.age.classes * norm.years.in.categories
> mean_diagT <- margin.tensor(mean_diagT, i=2)
> 
> low_diagT <- to.tensor(as.vector(postsims$low_diagT), dims= list(sex=c("M","F"), age=paste0('age', age.classes[1:(n.age.classes)]), screening_y=myyears ))
> size.age.classes <- to.tensor(diff(age.classes), dims=list(age=paste0('age', age.classes[1:n.age.classes]))) #JS040416
> low_diagT <- low_diagT / size.age.classes * norm.years.in.categories
> low_diagT <- margin.tensor(low_diagT, i=2)
> 
> upp_diagT <- to.tensor(as.vector(postsims$upp_diagT), dims= list(sex=c("M","F"), age=paste0('age', age.classes[1:(n.age.classes)]), screening_y=myyears ))
> size.age.classes <- to.tensor(diff(age.classes), dims=list(age=paste0('age', age.classes[1:n.age.classes]))) #JS040416
> upp_diagT <- upp_diagT / size.age.classes * norm.years.in.categories
> upp_diagT <- margin.tensor(upp_diagT, i=2)
> 
> # Incidence
> mean_incidenceT <- to.tensor(as.vector(postsims$mean_incidenceT), dims= list(sex=c("M","F"), age=paste0('age', age.classes[1:(n.age.classes)]), screening_y=myyears ))
> size.age.classes <- to.tensor(diff(age.classes), dims=list(age=paste0('age', age.classes[1:n.age.classes]))) #JS040416
> mean_incidenceT <- mean_incidenceT / size.age.classes * norm.years.in.categories
> mean_incidenceT <- margin.tensor(mean_incidenceT, i=2)
> 
> low_incidenceT <- to.tensor(as.vector(postsims$low_incidenceT), dims= list(sex=c("M","F"), age=paste0('age', age.classes[1:(n.age.classes)]), screening_y=myyears ))
> size.age.classes <- to.tensor(diff(age.classes), dims=list(age=paste0('age', age.classes[1:n.age.classes]))) #JS040416
> low_incidenceT <- low_incidenceT / size.age.classes * norm.years.in.categories
> low_incidenceT <- margin.tensor(low_incidenceT, i=2)
> 
> upp_incidenceT <- to.tensor(as.vector(postsims$upp_incidenceT), dims= list(sex=c("M","F"), age=paste0('age', age.classes[1:(n.age.classes)]), screening_y=myyears ))
> size.age.classes <- to.tensor(diff(age.classes), dims=list(age=paste0('age', age.classes[1:n.age.classes]))) #JS040416
> upp_incidenceT <- upp_incidenceT / size.age.classes * norm.years.in.categories
> upp_incidenceT <- margin.tensor(upp_incidenceT, i=2)
> 
> for (g in 1:2){
+   df_epistats <- data.frame(years=rep(myyears,4),
+                           shift=c(rep(-.15,length(myyears)),
+                                   rep(-.05,length(myyears)),
+                                   rep(.05,length(myyears)),
+                                   rep(.15,length(myyears))),
+                           testdata.upt.min=c(as.vector(uptake.minmax[g,1,1,]),
+                                              as.vector(uptake.minmax[g,2,1,]),
+                                              as.vector(uptake.minmax[g,3,1,]),
+                                              as.vector(uptake.minmax[g,4,1,])),
+                           testdata.upt.max=c(as.vector(uptake.minmax[g,1,2,]),
+                                              as.vector(uptake.minmax[g,2,2,]),
+                                              as.vector(uptake.minmax[g,3,2,]),
+                                              as.vector(uptake.minmax[g,4,2,])),
+                           testdata.upt.mean=c(as.vector(uptake.minmax[g,1,3,]),
+                                              as.vector(uptake.minmax[g,2,3,]),
+                                              as.vector(uptake.minmax[g,3,3,]),
+                                              as.vector(uptake.minmax[g,4,3,])),
+                           
+                           diagdata.upt.min=c(as.vector(epidata_diag[g,1,1,])/100000,
+                                              as.vector(epidata_diag[g,2,1,])/100000,
+                                              as.vector(epidata_diag[g,3,1,])/100000,
+                                              as.vector(epidata_diag[g,4,1,])/100000),
+                           diagdata.upt.max=c(as.vector(epidata_diag[g,1,2,])/100000,
+                                              as.vector(epidata_diag[g,2,2,])/100000,
+                                              as.vector(epidata_diag[g,3,2,])/100000,
+                                              as.vector(epidata_diag[g,4,2,])/100000),
+                           diagdata.upt.mean=c(as.vector(epidata_diag[g,1,3,])/100000,
+                                              as.vector(epidata_diag[g,2,3,])/100000,
+                                              as.vector(epidata_diag[g,3,3,])/100000,
+                                              as.vector(epidata_diag[g,4,3,])/100000),
+                           
+                           diagmodel.upt.mean=c(as.vector(mean_diagT[g,,1]),
+                                                as.vector(mean_diagT[g,,2]),
+                                                as.vector(mean_diagT[g,,3]),
+                                                as.vector(mean_diagT[g,,4])),
+                           
+                           diagmodel.upt.low=c(as.vector(low_diagT[g,,1]),
+                                               as.vector(low_diagT[g,,2]),
+                                               as.vector(low_diagT[g,,3]),
+                                               as.vector(low_diagT[g,,4])),
+                           
+                           diagmodel.upt.upp=c(as.vector(upp_diagT[g,,1]),
+                                               as.vector(upp_diagT[g,,2]),
+                                               as.vector(upp_diagT[g,,3]),
+                                               as.vector(upp_diagT[g,,4])),
+                          
+                          incidence.mean=c(as.vector(mean_incidenceT[g,,1]),
+                                 as.vector(mean_incidenceT[g,,2]),
+                                 as.vector(mean_incidenceT[g,,3]),
+                                 as.vector(mean_incidenceT[g,,4])),
+                          
+                          incidence.low=c(as.vector(low_incidenceT[g,,1]),
+                                as.vector(low_incidenceT[g,,2]),
+                                as.vector(low_incidenceT[g,,3]),
+                                as.vector(low_incidenceT[g,,4])),
+                          
+                          incidence.upp=c(as.vector(upp_incidenceT[g,,1]),
+                                as.vector(upp_incidenceT[g,,2]),
+                                as.vector(upp_incidenceT[g,,3]),
+                                as.vector(upp_incidenceT[g,,4])),
+                           
+                           grp=c(rep("15-19",length(myyears)),
+                                 rep("20-24",length(myyears)),
+                                 rep("25-34",length(myyears)),
+                                 rep("35-44",length(myyears))))
+   
+   testplot <- ggplot() +
+     geom_segment(data = df_epistats, aes(x = years+shift, xend = years+shift, y = testdata.upt.min, yend = testdata.upt.max, col=grp), size = 1, lineend = "butt") +
+     geom_point(data=df_epistats, aes(x=years+shift, y=testdata.upt.mean, col=grp), size=2, shape=19, alpha = 1) +
+     scale_x_continuous(breaks = seq(min(df_epistats$years), max(df_epistats$years), by = 2)) +
+     scale_color_manual("", values = mycol[1:4]) +
+     labs(x = "Years") +
+     labs(y = "Number of tests per person per year") +
+     scale_y_continuous(breaks = seq(0,0.4, by=0.05)) +
+     coord_cartesian(ylim=c(0,0.4)) +
+     ggtitle(gendernames[g]) +
+     theme_bw(base_family = "Times") +
+     theme(plot.background = element_blank(),panel.grid.major = element_blank(),panel.grid.minor = element_blank(),
+           legend.justification=c(0.01,.99), legend.position=c(0.01,.99),text=element_text(size=10, family="Arial"))
+   
+   
+   diagplot <- ggplot() +
+     geom_segment(data = df_epistats, aes(x = years+shift, xend = years+shift, y = diagdata.upt.min, yend = diagdata.upt.max, col=grp), size = 1, lineend = "butt") + 
+     geom_point(data=df_epistats, aes(x=years+shift, y=diagdata.upt.mean, col=grp), size=2, shape=19, alpha = 1) +
+     scale_x_continuous(breaks = seq(min(df_epistats$years), max(df_epistats$years), by = 2)) +
+     geom_line(data = df_epistats, aes(x = years+shift, y = diagmodel.upt.mean, col=grp), size = 1) + 
+     geom_ribbon(data=df_epistats, aes(x=years+shift, ymin=diagmodel.upt.low, ymax=diagmodel.upt.upp, fill=grp), alpha = .3)  +
+     scale_color_manual("", values = mycol[1:4]) +
+     scale_fill_manual("", values = mycol[1:4]) +
+     labs(x = "Years") +
+     labs(y = "Number of diagnoses per person per year") +
+     ggtitle(gendernames[g]) +
+     theme_bw(base_family = "Times") +
+     scale_y_continuous(breaks = seq(0,0.04, by=0.005)) +
+     coord_cartesian(ylim=c(0,0.04)) +
+     theme(plot.background = element_blank(),panel.grid.major = element_blank(),panel.grid.minor = element_blank(),
+           legend.justification=c(0.01,.99), legend.position=c(0.01,.99),text=element_text(size=10, family="Arial"))
+   
+   incidencetimeplot <- ggplot() +
+     geom_line(data=df_epistats, mapping=aes(x=years, y=incidence.mean, col=grp), size=1) +
+     geom_ribbon(data=df_epistats, aes(x=years, ymin=incidence.low, ymax=incidence.upp, fill=grp), alpha = .3) +
+     scale_x_continuous(breaks = seq(min(df_epistats$years), max(df_epistats$years), by = 2)) +
+     scale_y_continuous(breaks = seq(0,0.07, by=0.01)) +
+     scale_color_manual("", values = mycol[1:4]) +
+     scale_fill_manual("", values = mycol[1:4]) +
+     coord_cartesian(ylim=c(0,0.07)) +
+     labs(x = "Years") +
+     labs(y = "Incidence rates per person per year") +
+     ggtitle(gendernames[g]) +
+     theme_bw(base_family = "Times") +
+     theme(plot.background = element_blank(),panel.grid.major = element_blank(),panel.grid.minor = element_blank(),
+           legend.justification=c(0.99,.99), legend.position=c(0.99,.99),text=element_text(size=10, family="Arial"))
+   
+   positivityrateplot <- ggplot() +
+     geom_segment(data = df_epistats, aes(x = years+shift, xend = years+shift, 
+                                        y = diagdata.upt.min/((testdata.upt.min+testdata.upt.max)/2), 
+                                        yend = diagdata.upt.max/((testdata.upt.min+testdata.upt.max)/2),
+                                        col=grp), size = 1, lineend = "butt") + 
+     geom_point(data=df_epistats, aes(x=years+shift, y=((diagdata.upt.min+diagdata.upt.max)/2)/((testdata.upt.min+testdata.upt.max)/2), col=grp), size=3, shape=19, alpha = 1) +
+     geom_line(data = df_epistats, aes(x = years+shift, y = diagmodel.upt.mean/((testdata.upt.min+testdata.upt.max)/2), col=grp), size = 1) + 
+     geom_ribbon(data=df_epistats, aes(x=years+shift,
+                                     ymin=diagmodel.upt.low/((testdata.upt.min+testdata.upt.max)/2), 
+                                     ymax=diagmodel.upt.upp/((testdata.upt.min+testdata.upt.max)/2), 
+                                     fill=grp), alpha = .3)  +
+     scale_x_continuous(breaks = seq(min(df_epistats$years), max(df_epistats$years), by = 2)) +
+     scale_color_manual("", values = mycol[1:4]) +
+     scale_fill_manual("", values = mycol[1:4]) +
+     labs(x = "Years") +
+     labs(y = "Positivity rate") +
+     ggtitle(gendernames[g]) +
+     theme_bw(base_family = "Times") +
+     coord_cartesian(ylim=c(0,0.4)) +
+     theme(plot.background = element_blank(),panel.grid.major = element_blank(),panel.grid.minor = element_blank(),
+           legend.justification=c(0.99,.99), legend.position=c(0.99,.99),text=element_text(size=10, family="Arial"))
+   
+   
+   assign(paste0("testplot_",gendernames[g]), testplot)
+   assign(paste0("diagplot_",gendernames[g]), diagplot)
+   assign(paste0("incidencetimeplot_",gendernames[g]), incidencetimeplot)
+   assign(paste0("positivityrateplot_",gendernames[g]), positivityrateplot)
+ 
+ }
> 
> mycol <- brewer.pal(9,"Set1")
> mycol <- c(mycol[9],mycol[1:8])
> 
> ggsave(multiplot(plotlist=list(testplot_Men,testplot_Women), layout=matrix(c(1,2), nrow=1, byrow=TRUE)), 
+        filename = file.path(path_figures,"testsplot.pdf"), device = cairo_pdf, 
+        width = 7, height = 4, units = "in")
> 
> ggsave(multiplot(plotlist=list(diagplot_Men,diagplot_Women), layout=matrix(c(1,2), nrow=1, byrow=TRUE)), 
+        filename = file.path(path_figures,"diagplot.pdf"), device = cairo_pdf, 
+        width = 7, height = 4, units = "in")
> 
> ggsave(multiplot(plotlist=list(incidencetimeplot_Men,incidencetimeplot_Women), layout=matrix(c(1,2), nrow=1, byrow=TRUE)), 
+        filename = file.path(path_figures,"incidence_timeplot.pdf"), device = cairo_pdf, 
+        width = 7, height = 4, units = "in")
> 
> ggsave(multiplot(plotlist=list(positivityrateplot_Men,positivityrateplot_Women), layout=matrix(c(1,2), nrow=1, byrow=TRUE)), 
+        filename = file.path(path_figures,"posrateplot.pdf"), device = cairo_pdf, 
+        width = 7, height = 4, units = "in")
> 
> ####################################################################
> # plot change of value eta in time (for 16-24 and 25-44 separately) and plot prevalences
> ####################################################################
> 
> compute_rates_time <- function(trace.mcmc.pars,fitmodel, years){
+   
+   age.class.groups <- age.classes[1:n.age.classes]
+   plottedsims <- dim(trace.mcmc.pars)[1]
+   
+   eta_time <- to.tensor(NA, dims = list(sex=c("M","F"), age=paste0('age', age.class.groups), screening_y = years, nsim = 1:plottedsims))
+   screenrate_inf <- to.tensor(NA, dims = list(sex=c("M","F"), age=paste0('age', age.class.groups), screening_y = years, nsim = 1:plottedsims)) # screening rate in infected people
+   screenrate_sus <- to.tensor(NA, dims = list(sex=c("M","F"), age=paste0('age', age.class.groups), screening_y = years, nsim = 1:plottedsims)) # screening rate in uninfected people
+   screenrate_tot <- to.tensor(NA, dims = list(sex=c("M","F"), age=paste0('age', age.class.groups), screening_y = years, nsim = 1:plottedsims)) # screening rate in all people
+ 
+   times <- c(0, (parameters$burnintime - parameters$testperiod_in_burnin):(parameters$burnintime+dim(diagdata)[1]))
+   
+   
+   for (s in 1:plottedsims){
+     theta <- trace.mcmc.pars[s, 1:length(testmodel)]
+     notlearned <- tracetrace[1,which(!(fullmodel %in% testmodel))]
+     if(length(notlearned)==1) names(notlearned) <- "r"
+     theta.allpars <- unlist(c(theta, notlearned))
+     
+     simulation <- fitmodel$simulate(theta.allpars, times)
+     
+     
+     for (y in 1:length(years)){
+       
+       tensors <- initvec.to.tensor.cpp(simulation[which(times+2000-parameters$burnintime==years[y]),-1], par.cond = list(age_classes =age.classes[1:n.age.classes], nmb_act_classes = nJ))
+       
+       # compute screen_all
+       sympttest_all <- theta.allpars["treat"] * (margin.tensor(tensors$I_S,i=2) + margin.tensor(tensors$I_S2,i=2)) # all tests for treatment in compartment
+       alltest_all <- chi_all[,,which(dimnames(chi_all)$screening_y==as.character(years[y]))] # all tests in compartment
+       screen_all <- alltest_all - sympttest_all # all screening tests in compartment
+       
+       eta_exp <- 1 + (theta.allpars["eta1"]-1) * exp(-10^theta.allpars["eta2"]*screen_all)
+       
+       eta_time[,,y,s] <- eta_exp
+       
+       
+       screenrate_inf[,,y,s] <- eta_exp * screen_all /
+         (margin.tensor(tensors$S,i=2) + margin.tensor(tensors$R,i=2) + eta_exp * (margin.tensor(tensors$I_A,i=2) + margin.tensor(tensors$I_A2,i=2)))
+       
+       screenrate_sus[,,y,s] <- screenrate_inf[,,y,s] / eta_exp
+       
+       screenrate_tot[,,y,s] <- screen_all /
+         (margin.tensor(tensors$S,i=2) + margin.tensor(tensors$R,i=2) + margin.tensor(tensors$I_A,i=2) + margin.tensor(tensors$I_A2,i=2))
+       
+     }
+     
+   }
+   
+   sorted_eta_time <- eta_time
+   for (g in 1:dim(sorted_eta_time)[1]){
+     for (a in 1:dim(sorted_eta_time)[2]){
+       for (y in 1:dim(sorted_eta_time)[3]){
+         sorted_eta_time[g,a,y,] <- sort(eta_time[g,a,y,])
+       }
+     }
+   }
+   
+   sorted_screenrate_inf <- screenrate_inf
+   for (g in 1:dim(sorted_screenrate_inf)[1]){
+     for (a in 1:dim(sorted_screenrate_inf)[2]){
+       for (y in 1:dim(sorted_screenrate_inf)[3]){
+         sorted_screenrate_inf[g,a,y,] <- sort(screenrate_inf[g,a,y,])
+       }
+     }
+   }
+   
+   sorted_screenrate_sus <- screenrate_sus
+   for (g in 1:dim(sorted_screenrate_sus)[1]){
+     for (a in 1:dim(sorted_screenrate_sus)[2]){
+       for (y in 1:dim(sorted_screenrate_sus)[3]){
+         sorted_screenrate_sus[g,a,y,] <- sort(screenrate_sus[g,a,y,])
+       }
+     }
+   }
+   
+   sorted_screenrate_tot <- screenrate_tot
+   for (g in 1:dim(sorted_screenrate_tot)[1]){
+     for (a in 1:dim(sorted_screenrate_tot)[2]){
+       for (y in 1:dim(sorted_screenrate_tot)[3]){
+         sorted_screenrate_tot[g,a,y,] <- sort(screenrate_tot[g,a,y,])
+       }
+     }
+   }
+   
+   mean_eta_time <- apply(eta_time, MARGIN=c(1,2,3), FUN=mean)
+   low_eta_time <- sorted_eta_time[,,,ceiling(0.025*dim(trace.mcmc.pars)[1])]
+   upp_eta_time <- sorted_eta_time[,,,floor(0.975*dim(trace.mcmc.pars)[1])]
+   
+   mean_screenrate_inf <- apply(screenrate_inf, MARGIN=c(1,2,3), FUN=mean)
+   low_screenrate_inf <- sorted_screenrate_inf[,,,ceiling(0.025*dim(trace.mcmc.pars)[1])]
+   upp_screenrate_inf <- sorted_screenrate_inf[,,,floor(0.975*dim(trace.mcmc.pars)[1])]
+   
+   mean_screenrate_sus <- apply(screenrate_sus, MARGIN=c(1,2,3), FUN=mean)
+   low_screenrate_sus <- sorted_screenrate_sus[,,,ceiling(0.025*dim(trace.mcmc.pars)[1])]
+   upp_screenrate_sus <- sorted_screenrate_sus[,,,floor(0.975*dim(trace.mcmc.pars)[1])]
+   
+   mean_screenrate_tot <- apply(screenrate_tot, MARGIN=c(1,2,3), FUN=mean)
+   low_screenrate_tot <- sorted_screenrate_tot[,,,ceiling(0.025*dim(trace.mcmc.pars)[1])]
+   upp_screenrate_tot <- sorted_screenrate_tot[,,,floor(0.975*dim(trace.mcmc.pars)[1])]
+   
+   return(list(eta_time=eta_time, mean_eta_time=mean_eta_time, low_eta_time=low_eta_time, upp_eta_time=upp_eta_time,
+               screenrate_inf=screenrate_inf, mean_screenrate_inf=mean_screenrate_inf, low_screenrate_inf=low_screenrate_inf, upp_screenrate_inf=upp_screenrate_inf,
+               screenrate_sus=screenrate_sus, mean_screenrate_sus=mean_screenrate_sus, low_screenrate_sus=low_screenrate_sus, upp_screenrate_sus=upp_screenrate_sus,
+               screenrate_tot=screenrate_tot, mean_screenrate_tot=mean_screenrate_tot, low_screenrate_tot=low_screenrate_tot, upp_screenrate_tot=upp_screenrate_tot))
+   
+ }
> 
> rates_time <- compute_rates_time(trace.mcmc.pars=trace.combined, fitmodel=STI_MCMC_model, years=myyears)
> 
> # change of eta in time for different sex and age groups
> gendernames <- c("M","F")
> df_eta <- data.frame(years=myyears)
> 
> for (g in 1:2){
+ 
+   df_eta[paste0("mean_",gendernames[g],"_1519")] <- as.vector(3/5*rates_time$mean_eta_time[g,1,] + 2/5*rates_time$mean_eta_time[g,2,])
+   df_eta[paste0("mean_",gendernames[g],"_2024")] <- as.vector(rates_time$mean_eta_time[g,3,])
+   df_eta[paste0("mean_",gendernames[g],"_2534")] <- as.vector(rates_time$mean_eta_time[g,4,])
+   df_eta[paste0("mean_",gendernames[g],"_3544")] <- as.vector(rates_time$mean_eta_time[g,5,])
+ 
+   df_eta[paste0("low_",gendernames[g],"_1519")] <- as.vector(3/5*rates_time$low_eta_time[g,1,] + 2/5*rates_time$low_eta_time[g,2,])
+   df_eta[paste0("low_",gendernames[g],"_2024")] <- as.vector(rates_time$low_eta_time[g,3,])
+   df_eta[paste0("low_",gendernames[g],"_2534")] <- as.vector(rates_time$low_eta_time[g,4,])
+   df_eta[paste0("low_",gendernames[g],"_3544")] <- as.vector(rates_time$low_eta_time[g,5,])
+ 
+   df_eta[paste0("upp_",gendernames[g],"_1519")] <- as.vector(3/5*rates_time$upp_eta_time[g,1,] + 2/5*rates_time$upp_eta_time[g,2,])
+   df_eta[paste0("upp_",gendernames[g],"_2024")] <- as.vector(rates_time$upp_eta_time[g,3,])
+   df_eta[paste0("upp_",gendernames[g],"_2534")] <- as.vector(rates_time$upp_eta_time[g,4,])
+   df_eta[paste0("upp_",gendernames[g],"_3544")] <- as.vector(rates_time$upp_eta_time[g,5,])
+ 
+ }
> 
> etaM_timeplot <- ggplot() +
+   geom_line(data=df_eta, mapping=aes(x=years, y=5/10*mean_M_1519+5/10*mean_M_2024), colour=mycol[1]) +
+   geom_ribbon(data=df_eta, aes(x=years, ymin=5/10*low_M_1519+5/10*low_M_2024, ymax=5/10*upp_M_1519+5/10*upp_M_2024), fill="black", alpha = .1) +
+   scale_x_continuous(breaks = seq(min(df_eta$years), max(df_eta$years), by = 2)) +
+   scale_y_continuous(breaks = seq(0,8, by=1)) +
+   coord_cartesian(ylim=c(0,8)) +
+   labs(x = "Years") +
+   labs(y = "Differential screening coverage") +
+   ggtitle("Men (15-24 years old)") +
+   theme_bw(base_family = "Times") +
+   theme(plot.background = element_blank(),panel.grid.major = element_blank(),panel.grid.minor = element_blank(),text=element_text(size=10, family="Arial"))
> 
> etaF_timeplot <- ggplot() +
+   geom_line(data=df_eta, mapping=aes(x=years, y=5/10*mean_F_1519+5/10*mean_F_2024), colour=mycol[1]) +
+   geom_ribbon(data=df_eta, aes(x=years, ymin=5/10*low_F_1519+5/10*low_F_2024, ymax=5/10*upp_F_1519+5/10*upp_F_2024), fill="black", alpha = .1) +
+   scale_x_continuous(breaks = seq(min(df_eta$years), max(df_eta$years), by = 2)) +
+   scale_y_continuous(breaks = seq(0,8, by=1)) +
+   coord_cartesian(ylim=c(0,8)) +
+   labs(x = "Years") +
+   labs(y = "Differential screening coverage") +
+   ggtitle("Women (15-24 years old)") +
+   theme_bw(base_family = "Times") +
+   theme(plot.background = element_blank(),panel.grid.major = element_blank(),panel.grid.minor = element_blank(),text=element_text(size=10, family="Arial"))
> 
> ggsave(multiplot(plotlist=list(etaM_timeplot,etaF_timeplot), layout=matrix(c(1,2), nrow=1, byrow=TRUE)), 
+        filename = file.path(path_figures,"eta_plot_1524.pdf"), device = cairo_pdf, 
+        width = 7, height = 4, units = "in")
> 
> gendernames <- c("Men","Women")
> for (g in 1:2){
+   df_rates <- data.frame(years=rep(myyears,4),
+                          mean_eta=c(as.vector(3/5*rates_time$mean_eta_time[g,1,] + 2/5*rates_time$mean_eta_time[g,2,]),
+                                     as.vector(rates_time$mean_eta_time[g,3,]),
+                                     as.vector(rates_time$mean_eta_time[g,4,]),
+                                     as.vector(rates_time$mean_eta_time[g,5,])),
+                          
+                          low_eta=c(as.vector(3/5*rates_time$low_eta_time[g,1,] + 2/5*rates_time$low_eta_time[g,2,]),
+                                    as.vector(rates_time$low_eta_time[g,3,]),
+                                    as.vector(rates_time$low_eta_time[g,4,]),
+                                    as.vector(rates_time$low_eta_time[g,5,])),
+                          
+                          upp_eta=c(as.vector(3/5*rates_time$upp_eta_time[g,1,] + 2/5*rates_time$upp_eta_time[g,2,]),
+                                    as.vector(rates_time$upp_eta_time[g,3,]),
+                                    as.vector(rates_time$upp_eta_time[g,4,]),
+                                    as.vector(rates_time$upp_eta_time[g,5,])),
+                          
+                          mean_screenrate_tot=c(as.vector(3/5*rates_time$mean_screenrate_tot[g,1,] + 2/5*rates_time$mean_screenrate_tot[g,2,]),
+                                                as.vector(rates_time$mean_screenrate_tot[g,3,]),
+                                                as.vector(rates_time$mean_screenrate_tot[g,4,]),
+                                                as.vector(rates_time$mean_screenrate_tot[g,5,])),
+                          
+                          low_screenrate_tot=c(as.vector(3/5*rates_time$low_screenrate_tot[g,1,] + 2/5*rates_time$low_screenrate_tot[g,2,]),
+                                               as.vector(rates_time$low_screenrate_tot[g,3,]),
+                                               as.vector(rates_time$low_screenrate_tot[g,4,]),
+                                               as.vector(rates_time$low_screenrate_tot[g,5,])),
+                          
+                          upp_screenrate_tot=c(as.vector(3/5*rates_time$upp_screenrate_tot[g,1,] + 2/5*rates_time$upp_screenrate_tot[g,2,]),
+                                               as.vector(rates_time$upp_screenrate_tot[g,3,]),
+                                               as.vector(rates_time$upp_screenrate_tot[g,4,]),
+                                               as.vector(rates_time$upp_screenrate_tot[g,5,])),
+                          
+                          mean_screenrate_inf=c(as.vector(3/5*rates_time$mean_screenrate_inf[g,1,] + 2/5*rates_time$mean_screenrate_inf[g,2,]),
+                                                as.vector(rates_time$mean_screenrate_inf[g,3,]),
+                                                as.vector(rates_time$mean_screenrate_inf[g,4,]),
+                                                as.vector(rates_time$mean_screenrate_inf[g,5,])),
+                          
+                          low_screenrate_inf=c(as.vector(3/5*rates_time$low_screenrate_inf[g,1,] + 2/5*rates_time$low_screenrate_inf[g,2,]),
+                                               as.vector(rates_time$low_screenrate_inf[g,3,]),
+                                               as.vector(rates_time$low_screenrate_inf[g,4,]),
+                                               as.vector(rates_time$low_screenrate_inf[g,5,])),
+                          
+                          upp_screenrate_inf=c(as.vector(3/5*rates_time$upp_screenrate_inf[g,1,] + 2/5*rates_time$upp_screenrate_inf[g,2,]),
+                                               as.vector(rates_time$upp_screenrate_inf[g,3,]),
+                                               as.vector(rates_time$upp_screenrate_inf[g,4,]),
+                                               as.vector(rates_time$upp_screenrate_inf[g,5,])),
+                          
+                          mean_screenrate_sus=c(as.vector(3/5*rates_time$mean_screenrate_sus[g,1,] + 2/5*rates_time$mean_screenrate_sus[g,2,]),
+                                                as.vector(rates_time$mean_screenrate_sus[g,3,]),
+                                                as.vector(rates_time$mean_screenrate_sus[g,4,]),
+                                                as.vector(rates_time$mean_screenrate_sus[g,5,])),
+                          
+                          low_screenrate_sus=c(as.vector(3/5*rates_time$low_screenrate_sus[g,1,] + 2/5*rates_time$low_screenrate_sus[g,2,]),
+                                               as.vector(rates_time$low_screenrate_sus[g,3,]),
+                                               as.vector(rates_time$low_screenrate_sus[g,4,]),
+                                               as.vector(rates_time$low_screenrate_sus[g,5,])),
+                          
+                          upp_screenrate_sus=c(as.vector(3/5*rates_time$upp_screenrate_sus[g,1,] + 2/5*rates_time$upp_screenrate_sus[g,2,]),
+                                               as.vector(rates_time$upp_screenrate_sus[g,3,]),
+                                               as.vector(rates_time$upp_screenrate_sus[g,4,]),
+                                               as.vector(rates_time$upp_screenrate_sus[g,5,])),
+                          
+                          grp=c(rep("15-19",length(myyears)),
+                                rep("20-24",length(myyears)),
+                                rep("25-34",length(myyears)),
+                                rep("35-44",length(myyears))))
+   
+   eta_plot <- ggplot() +
+     geom_line(data=df_rates, mapping=aes(x=years, y=mean_eta, col=grp), size=1) +
+     geom_ribbon(data=df_rates, aes(x=years, ymin=low_eta, ymax=upp_eta, fill=grp), alpha = .3) +
+     scale_x_continuous(breaks = seq(min(df_rates$years), max(df_rates$years), by = 2)) +
+     scale_y_continuous(breaks = seq(0,8, by=1)) +
+     scale_color_manual("", values = mycol[1:4]) +
+     scale_fill_manual("", values = mycol[1:4]) +
+     coord_cartesian(ylim=c(0,8)) +
+     labs(x = "Years") +
+     labs(y = "Differential screening coverage") +
+     ggtitle(gendernames[g]) +
+     theme_bw(base_family = "Times") +
+     theme(plot.background = element_blank(),panel.grid.major = element_blank(),panel.grid.minor = element_blank(),
+           legend.justification=c(0.01,.99), legend.position=c(0.01,.99),text=element_text(size=10, family="Arial"))
+   
+   screenrate_tot_plot <- ggplot() +
+     geom_line(data=df_rates, mapping=aes(x=years, y=mean_screenrate_tot, col=grp), size=1) +
+     geom_ribbon(data=df_rates, aes(x=years, ymin=low_screenrate_tot, ymax=upp_screenrate_tot, fill=grp), alpha = .3) +
+     scale_x_continuous(breaks = seq(min(df_rates$years), max(df_rates$years), by = 2)) +
+     scale_y_continuous(breaks = seq(0,.8, by=.1)) +
+     scale_color_manual("", values = mycol[1:4]) +
+     scale_fill_manual("", values = mycol[1:4]) +
+     coord_cartesian(ylim=c(0,0.8)) +
+     labs(x = "Years") +
+     labs(y = "Screening rates per year") +
+     ggtitle(gendernames[g]) +
+     theme_bw(base_family = "Times") +
+     theme(plot.background = element_blank(),panel.grid.major = element_blank(),panel.grid.minor = element_blank(),
+           legend.justification=c(0.01,.99), legend.position=c(0.01,.99),text=element_text(size=10, family="Arial"))
+   
+   screenrate_inf_plot <- ggplot() +
+     geom_line(data=df_rates, mapping=aes(x=years, y=mean_screenrate_inf, col=grp), size=1) +
+     geom_ribbon(data=df_rates, aes(x=years, ymin=low_screenrate_inf, ymax=upp_screenrate_inf, fill=grp), alpha = .3) +
+     scale_x_continuous(breaks = seq(min(df_rates$years), max(df_rates$years), by = 2)) +
+     scale_y_continuous(breaks = seq(0,2.5, by=.5)) +
+     scale_color_manual("", values = mycol[1:4]) +
+     scale_fill_manual("", values = mycol[1:4]) +
+     coord_cartesian(ylim=c(0,2.5)) +
+     labs(x = "Years") +
+     labs(y = expression("Screening rate asymptomatically infected ("*chi^A*" )")) +
+     ggtitle(gendernames[g]) +
+     theme_bw(base_family = "Times") +
+     theme(plot.background = element_blank(),panel.grid.major = element_blank(),panel.grid.minor = element_blank(),
+           legend.justification=c(0.01,.99), legend.position=c(0.01,.99),text=element_text(size=10, family="Arial"))
+   
+   screenrate_sus_plot <- ggplot() +
+     geom_line(data=df_rates, mapping=aes(x=years, y=mean_screenrate_sus, col=grp), size=1) +
+     geom_ribbon(data=df_rates, aes(x=years, ymin=low_screenrate_sus, ymax=upp_screenrate_sus, fill=grp), alpha = .3) +
+     scale_x_continuous(breaks = seq(min(df_rates$years), max(df_rates$years), by = 2)) +
+     scale_y_continuous(breaks = seq(0,1, by=.2)) +
+     scale_color_manual("", values = mycol[1:4]) +
+     scale_fill_manual("", values = mycol[1:4]) +
+     coord_cartesian(ylim=c(0,1)) +
+     labs(x = "Years") +
+     labs(y = "Screening rate uninfected people") +
+     ggtitle(gendernames[g]) +
+     theme_bw(base_family = "Times") +
+     theme(plot.background = element_blank(),panel.grid.major = element_blank(),panel.grid.minor = element_blank(),
+           legend.justification=c(0.01,.99), legend.position=c(0.01,.99),text=element_text(size=10, family="Arial"))
+   
+   assign(paste0("eta_plot_",gendernames[g]), eta_plot)
+   assign(paste0("screenrate_tot_plot_",gendernames[g]), screenrate_tot_plot)
+   assign(paste0("screenrate_inf_plot_",gendernames[g]), screenrate_inf_plot)
+   assign(paste0("screenrate_sus_plot_",gendernames[g]), screenrate_sus_plot)
+ }
> 
> # eta
> ggsave(multiplot(plotlist=list(eta_plot_Men,eta_plot_Women), layout=matrix(c(1,2), nrow=1, byrow=TRUE)), 
+        filename = file.path(path_figures,"eta_plot.pdf"), device = cairo_pdf, 
+        width = 7, height = 4, units = "in")
> 
> # screen rate in all
> ggsave(multiplot(plotlist=list(screenrate_tot_plot_Men,screenrate_tot_plot_Women), layout=matrix(c(1,2), nrow=1, byrow=TRUE)), 
+        filename = file.path(path_figures,"screenrate_tot_timeplot.pdf"), device = cairo_pdf, 
+        width = 7, height = 4, units = "in")
> 
> # screen rate in infecteds (rate xi in model)
> ggsave(multiplot(plotlist=list(screenrate_inf_plot_Men,screenrate_inf_plot_Women), layout=matrix(c(1,2), nrow=1, byrow=TRUE)), 
+        filename = file.path(path_figures,"screenrate_inf_timeplot.pdf"), device = cairo_pdf, 
+        width = 7, height = 4, units = "in")
> 
> # screen rate in uninfecteds
> ggsave(multiplot(plotlist=list(screenrate_sus_plot_Men,screenrate_sus_plot_Women), layout=matrix(c(1,2), nrow=1, byrow=TRUE)), 
+        filename = file.path(path_figures,"screenrate_sus_timeplot.pdf"), device = cairo_pdf, 
+        width = 7, height = 4, units = "in")
> 
> ###########################################################################################################
> ### ANALYSIS OF WHAT WOULD HAVE HAPPENED WITH PREVALENCE IF ETA2 had been constant
> ###########################################################################################################
> 
> trace.combined.etaconstant <- trace.combined
> trace.combined.etaconstant["eta2"] <- -6
> postsims_eta2constant <- simulate_prevs_diag(trace.combined.etaconstant, STI_MCMC_model, years=myyears)
> 
> # change of prevalence in time for different sex and age groups
> gendernames <- c("M","F")
> df_prev_counterfactual <- data.frame(years=myyears)
> 
> for (g in 1:2){
+   
+   df_prev_counterfactual[paste0("mean_",gendernames[g],"_1519_true")] <- as.vector(3/5*postsims$mean_prevalenceT[g,1,] + 2/5*postsims$mean_prevalenceT[g,2,])
+   df_prev_counterfactual[paste0("mean_",gendernames[g],"_2024_true")] <- as.vector(postsims$mean_prevalenceT[g,3,])
+   df_prev_counterfactual[paste0("mean_",gendernames[g],"_2534_true")] <- as.vector(postsims$mean_prevalenceT[g,4,])
+   df_prev_counterfactual[paste0("mean_",gendernames[g],"_3544_true")] <- as.vector(postsims$mean_prevalenceT[g,5,])
+   
+   df_prev_counterfactual[paste0("low_",gendernames[g],"_1519_true")] <- as.vector(3/5*postsims$low_prevalenceT[g,1,] + 2/5*postsims$low_prevalenceT[g,2,])
+   df_prev_counterfactual[paste0("low_",gendernames[g],"_2024_true")] <- as.vector(postsims$low_prevalenceT[g,3,])
+   df_prev_counterfactual[paste0("low_",gendernames[g],"_2534_true")] <- as.vector(postsims$low_prevalenceT[g,4,])
+   df_prev_counterfactual[paste0("low_",gendernames[g],"_3544_true")] <- as.vector(postsims$low_prevalenceT[g,5,])
+   
+   df_prev_counterfactual[paste0("upp_",gendernames[g],"_1519_true")] <- as.vector(3/5*postsims$upp_prevalenceT[g,1,] + 2/5*postsims$upp_prevalenceT[g,2,])
+   df_prev_counterfactual[paste0("upp_",gendernames[g],"_2024_true")] <- as.vector(postsims$upp_prevalenceT[g,3,])
+   df_prev_counterfactual[paste0("upp_",gendernames[g],"_2534_true")] <- as.vector(postsims$upp_prevalenceT[g,4,])
+   df_prev_counterfactual[paste0("upp_",gendernames[g],"_3544_true")] <- as.vector(postsims$upp_prevalenceT[g,5,])
+   
+   
+   
+   
+   
+   df_prev_counterfactual[paste0("mean_",gendernames[g],"_1519_counterfactual")] <- as.vector(3/5*postsims_eta2constant$mean_prevalenceT[g,1,] + 2/5*postsims_eta2constant$mean_prevalenceT[g,2,])
+   df_prev_counterfactual[paste0("mean_",gendernames[g],"_2024_counterfactual")] <- as.vector(postsims_eta2constant$mean_prevalenceT[g,3,])
+   df_prev_counterfactual[paste0("mean_",gendernames[g],"_2534_counterfactual")] <- as.vector(postsims_eta2constant$mean_prevalenceT[g,4,])
+   df_prev_counterfactual[paste0("mean_",gendernames[g],"_3544_counterfactual")] <- as.vector(postsims_eta2constant$mean_prevalenceT[g,5,])
+   
+   df_prev_counterfactual[paste0("low_",gendernames[g],"_1519_counterfactual")] <- as.vector(3/5*postsims_eta2constant$low_prevalenceT[g,1,] + 2/5*postsims_eta2constant$low_prevalenceT[g,2,])
+   df_prev_counterfactual[paste0("low_",gendernames[g],"_2024_counterfactual")] <- as.vector(postsims_eta2constant$low_prevalenceT[g,3,])
+   df_prev_counterfactual[paste0("low_",gendernames[g],"_2534_counterfactual")] <- as.vector(postsims_eta2constant$low_prevalenceT[g,4,])
+   df_prev_counterfactual[paste0("low_",gendernames[g],"_3544_counterfactual")] <- as.vector(postsims_eta2constant$low_prevalenceT[g,5,])
+   
+   df_prev_counterfactual[paste0("upp_",gendernames[g],"_1519_counterfactual")] <- as.vector(3/5*postsims_eta2constant$upp_prevalenceT[g,1,] + 2/5*postsims_eta2constant$upp_prevalenceT[g,2,])
+   df_prev_counterfactual[paste0("upp_",gendernames[g],"_2024_counterfactual")] <- as.vector(postsims_eta2constant$upp_prevalenceT[g,3,])
+   df_prev_counterfactual[paste0("upp_",gendernames[g],"_2534_counterfactual")] <- as.vector(postsims_eta2constant$upp_prevalenceT[g,4,])
+   df_prev_counterfactual[paste0("upp_",gendernames[g],"_3544_counterfactual")] <- as.vector(postsims_eta2constant$upp_prevalenceT[g,5,])
+   
+ }
> # Natsal-2 data 18-24 (Lewis et al, Lancet public health 2018)
> # Natsal-3 data 16-24 (Sonnenberg et al, Lancet 2013)
> df_prev_counterfactual["mean_natsal23_M"] <- c(0.029,rep(NA,10),0.023)
> df_prev_counterfactual["low_natsal23_M"] <- c(0.013,rep(NA,10),0.015)
> df_prev_counterfactual["upp_natsal23_M"] <- c(0.063,rep(NA,10),0.034)
> df_prev_counterfactual["mean_natsal23_F"] <- c(0.031,rep(NA,10),0.031)
> df_prev_counterfactual["low_natsal23_F"] <- c(0.018,rep(NA,10),0.022)
> df_prev_counterfactual["upp_natsal23_F"] <- c(0.052,rep(NA,10),0.043)
> 
> # plot fitted prevalence and prevalence in counterfactual scenario in same plot, 16-24 years old
> prevtime_counterfactual_plot_M <- ggplot() +
+   geom_line(data=df_prev_counterfactual, mapping=aes(x=years, y=5/10*mean_M_1519_counterfactual+5/10*mean_M_2024_counterfactual), colour=mycol[1],linetype = "dashed") +
+   geom_line(data=df_prev_counterfactual, mapping=aes(x=years, y=5/10*low_M_1519_counterfactual+5/10*low_M_2024_counterfactual), colour=mycol[1],linetype = "dashed") +
+   geom_line(data=df_prev_counterfactual, mapping=aes(x=years, y=5/10*upp_M_1519_counterfactual+5/10*upp_M_2024_counterfactual), colour=mycol[1],linetype = "dashed") +
+   geom_ribbon(data=df_prev_counterfactual, aes(x=years, ymin=5/10*low_M_1519_counterfactual+5/10*low_M_2024_counterfactual, 
+                                                ymax=5/10*upp_M_1519_counterfactual+5/10*upp_M_2024_counterfactual), fill="black", alpha = .1) +
+   geom_errorbar(data=df_prev_counterfactual, mapping=aes(x=years, ymin=low_natsal23_M, ymax=upp_natsal23_M), width=0.2, size=.5, alpha = 1) + 
+   geom_point(data=df_prev_counterfactual, mapping=aes(x=years, y=mean_natsal23_M), size=3, shape=19, alpha = 1) +
+   
+   geom_line(data=df_prev_counterfactual, mapping=aes(x=years, y=5/10*mean_M_1519_true+5/10*mean_M_2024_true), colour=mycol[1],linetype = "solid") +
+   geom_line(data=df_prev_counterfactual, mapping=aes(x=years, y=5/10*low_M_1519_true+5/10*low_M_2024_true), colour=mycol[1],linetype = "solid") +
+   geom_line(data=df_prev_counterfactual, mapping=aes(x=years, y=5/10*upp_M_1519_true+5/10*upp_M_2024_true), colour=mycol[1],linetype = "solid") +
+   geom_ribbon(data=df_prev_counterfactual, aes(x=years, ymin=5/10*low_M_1519_true+5/10*low_M_2024_true, ymax=5/10*upp_M_1519_true+5/10*upp_M_2024_true), fill="black", alpha = .1) +
+   scale_x_continuous(breaks = seq(min(df_prev_counterfactual$years), max(df_prev_counterfactual$years), by = 2)) +
+   scale_y_continuous(breaks = seq(0,0.06, by=0.01)) +
+   coord_cartesian(ylim=c(0,0.06)) +
+   annotate("text", x=2010, y=0.025, label= "best-fit", size=3) +
+   annotate("text", x=2008.5, y=0.015, label= "counterfactual", size=3) +
+   labs(x = "Years") +
+   labs(y = "Prevalence") +
+   ggtitle("Men (15-24 years old)") +
+   theme_bw(base_family = "Times") +
+   theme(plot.background = element_blank(),panel.grid.major = element_blank(),panel.grid.minor = element_blank(),text=element_text(size=10, family="Arial"))
> 
> prevtime_counterfactual_plot_F <- ggplot() +
+   geom_line(data=df_prev_counterfactual, mapping=aes(x=years, y=5/10*mean_F_1519_counterfactual+5/10*mean_F_2024_counterfactual), colour=mycol[1],linetype = "dashed") +
+   geom_line(data=df_prev_counterfactual, mapping=aes(x=years, y=5/10*low_F_1519_counterfactual+5/10*low_F_2024_counterfactual), colour=mycol[1],linetype = "dashed") +
+   geom_line(data=df_prev_counterfactual, mapping=aes(x=years, y=5/10*upp_F_1519_counterfactual+5/10*upp_F_2024_counterfactual), colour=mycol[1],linetype = "dashed") +
+   geom_ribbon(data=df_prev_counterfactual, aes(x=years, ymin=5/10*low_F_1519_counterfactual+5/10*low_F_2024_counterfactual, 
+                                                ymax=5/10*upp_F_1519_counterfactual+5/10*upp_F_2024_counterfactual), fill="black", alpha = .1) +
+   geom_errorbar(data=df_prev_counterfactual, mapping=aes(x=years, ymin=low_natsal23_F, ymax=upp_natsal23_F), width=0.2, size=.5, alpha = 1) + 
+   geom_point(data=df_prev_counterfactual, mapping=aes(x=years, y=mean_natsal23_F), size=3, shape=19, alpha = 1) +
+   
+   geom_line(data=df_prev_counterfactual, mapping=aes(x=years, y=5/10*mean_F_1519_true+5/10*mean_F_2024_true), colour=mycol[1],linetype = "solid") +
+   geom_line(data=df_prev_counterfactual, mapping=aes(x=years, y=5/10*low_F_1519_true+5/10*low_F_2024_true), colour=mycol[1],linetype = "solid") +
+   geom_line(data=df_prev_counterfactual, mapping=aes(x=years, y=5/10*upp_F_1519_true+5/10*upp_F_2024_true), colour=mycol[1],linetype = "solid") +
+   geom_ribbon(data=df_prev_counterfactual, aes(x=years, ymin=5/10*low_F_1519_true+5/10*low_F_2024_true, 
+                                                ymax=5/10*upp_F_1519_true+5/10*upp_F_2024_true), fill="black", alpha = .1) +
+   scale_x_continuous(breaks = seq(min(df_prev_counterfactual$years), max(df_prev_counterfactual$years), by = 2)) +
+   scale_y_continuous(breaks = seq(0,0.06, by=0.01)) +
+   coord_cartesian(ylim=c(0,0.06)) +
+   annotate("text", x=2010, y=0.025, label= "best-fit", size=3) +
+   annotate("text", x=2008.5, y=0.015, label= "counterfactual", size=3) +
+   labs(x = "Years") +
+   labs(y = "Prevalence") +
+   ggtitle("Women (15-24 years old)") +
+   theme_bw(base_family = "Times") +
+   theme(plot.background = element_blank(),panel.grid.major = element_blank(),panel.grid.minor = element_blank(),text=element_text(size=10, family="Arial"))
> 
> ggsave(multiplot(plotlist=list(prevtime_counterfactual_plot_M,prevtime_counterfactual_plot_F), layout=matrix(c(1,2), nrow=1, byrow=TRUE)), 
+        filename = file.path(path_figures,"prevtime_counterfactual_plot.pdf"), device = cairo_pdf, 
+        width = 7, height = 4, units = "in")
Warning messages:
1: Removed 10 rows containing missing values (geom_errorbar). 
2: Removed 10 rows containing missing values (geom_point). 
3: Removed 10 rows containing missing values (geom_errorbar). 
4: Removed 10 rows containing missing values (geom_point). 
> 
> ##############################################################################
> # return non-pdf output
> ##############################################################################
> 
> mcmcdata <- list(accrate=accrate,
+                    effectiveSize=effectiveSize,
+                    summary.trace.mcmc.params.burned=summary.trace.mcmc.params.burned,
+                    Rhat=Rhat,
+                    D.theta.bar=D.theta.bar,
+                    p.D=p.D,
+                    DIC=DIC,
+                    pW=pW,
+                    pW.alt=pW.alt,
+                    WAIC=WAIC)
> save(mcmcdata, file=file.path(path_figures,"mcmcdata.RData" ))
> 
> plotsummarydata <- list(plotdataM.2000=plotdataM.2000,plotdataF.2000=plotdataF.2000,plotdataM.2011=plotdataM.2011,plotdataF.2011=plotdataF.2011,
+                         df_prev=df_prev,diagdataM=diagdataM,diagdataF=diagdataF,df_eta=df_eta,
+                         df_screenrate_tot=df_screenrate_tot,df_screenrate_inf=df_screenrate_inf,
+                         df_prev_counterfactual=df_prev_counterfactual)
Error: object 'diagdataM' not found
Execution halted
